Core Classes, Functions, and Methods:
1. Model
- `Snake`: Represents the snake in the game and contains methods for moving the snake and checking for collisions with the walls and itself.
- `Food`: Represents the food in the game and contains methods for generating a new food location and checking for collisions with the snake.
2. View
- `GameView`: Represents the game window and contains methods for drawing the snake, food, and game over screen.
3. Controller
- `GameController`: Handles user input and updates the model and view accordingly.
4. Other
- `main`: The entry point of the program that initializes the model, view, and controller and starts the game loop.

game_model.py
```python
from dataclasses import dataclass
from typing import List, Tuple

@dataclass
class Snake:
    body: List[Tuple[int, int]]
    direction: Tuple[int, int]

    def move(self):
        """Moves the snake in the current direction"""
        head = self.body[0]
        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])
        self.body.insert(0, new_head)
        self.body.pop()

    def check_collision(self, width: int, height: int) -> bool:
        """Checks if the snake has collided with the walls or itself"""
        head = self.body[0]
        if head[0] < 0 or head[0] >= width or head[1] < 0 or head[1] >= height:
            return True
        if head in self.body[1:]:
            return True
        return False

@dataclass
class Food:
    position: Tuple[int, int]

    def generate_position(self, width: int, height: int):
        """Generates a new random position for the food"""
        self.position = (random.randint(0, width-1), random.randint(0, height-1))

    def check_collision(self, snake: Snake) -> bool:
        """Checks if the food has collided with the snake"""
        return self.position == snake.body[0]
```

game_view.py
```python
import pygame

class GameView:
    def __init__(self, width: int, height: int):
        """Initializes the game window"""
        self.width = width
        self.height = height
        self.screen = pygame.display.set_mode((width, height))
        pygame.display.set_caption("Snake")

    def draw_snake(self, snake: Snake):
        """Draws the snake on the screen"""
        for segment in snake.body:
            pygame.draw.rect(self.screen, (0, 255, 0), (segment[0]*10, segment[1]*10, 10, 10))

    def draw_food(self, food: Food):
        """Draws the food on the screen"""
        pygame.draw.rect(self.screen, (255, 0, 0), (food.position[0]*10, food.position[1]*10, 10, 10))

    def draw_game_over(self):
        """Draws the game over screen"""
        font = pygame.font.SysFont(None, 48)
        text = font.render("Game Over", True, (255, 255, 255))
        text_rect = text.get_rect(center=(self.width/2, self.height/2))
        self.screen.blit(text, text_rect)
        pygame.display.update()
```

game_controller.py
```python
import pygame

class GameController:
    def __init__(self, snake: Snake, food: Food):
        """Initializes the game controller"""
        self.snake = snake
        self.food = food

    def handle_input(self):
        """Handles user input"""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and self.snake.direction != (0, 1):
                    self.snake.direction = (0, -1)
                elif event.key == pygame.K_DOWN and self.snake.direction != (0, -1):
                    self.snake.direction = (0, 1)
                elif event.key == pygame.K_LEFT and self.snake.direction != (1, 0):
                    self.snake.direction = (-1, 0)
                elif event.key == pygame.K_RIGHT and self.snake.direction != (-1, 0):
                    self.snake.direction = (1, 0)

    def update(self):
        """Updates the game state"""
        self.snake.move()
        if self.food.check_collision(self.snake):
            self.snake.body.append(self.food.position)
            self.food.generate_position(self.width, self.height)
        if self.snake.check_collision(self.width, self.height):
            self.game_over = True

    def run(self, width: int, height: int):
        """Runs the game loop"""
        pygame.init()
        self.width = width
        self.height = height
        self.game_over = False
        clock = pygame.time.Clock()
        self.food.generate_position(width, height)
        while not self.game_over:
            clock.tick(10)
            self.handle_input()
            self.update()
            self.screen.fill((0, 0, 0))
            self.view.draw_snake(self.snake)
            self.view.draw_food(self.food)
            pygame.display.update()
        self.view.draw_game_over()
        pygame.time.wait(3000)
        pygame.quit()
        sys.exit()
```

main.py
```python
from game_model import Snake, Food
from game_view import GameView
from game_controller import GameController

def main():
    snake = Snake([(5, 5), (4, 5), (3, 5)], (1, 0))
    food = Food((0, 0))
    view = GameView(500, 500)
    controller = GameController(snake, food, view)
    controller.run(50, 50)

if __name__ == "__main__":
    main()
```

requirements.txt
```
pygame==2.0.1
```
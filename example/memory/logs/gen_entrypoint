[{"role": "system", "content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n"}, {"role": "user", "content": "Information about the codebase:\n\nCore Classes, Functions, and Methods:\n1. Model\n- `Snake`: Represents the snake in the game and contains methods for moving the snake and checking for collisions with the walls and itself.\n- `Food`: Represents the food in the game and contains methods for generating a new food location and checking for collisions with the snake.\n2. View\n- `GameView`: Represents the game window and contains methods for drawing the snake, food, and game over screen.\n3. Controller\n- `GameController`: Handles user input and updates the model and view accordingly.\n4. Other\n- `main`: The entry point of the program that initializes the model, view, and controller and starts the game loop.\n\ngame_model.py\n```python\nfrom dataclasses import dataclass\nfrom typing import List, Tuple\n\n@dataclass\nclass Snake:\n    body: List[Tuple[int, int]]\n    direction: Tuple[int, int]\n\n    def move(self):\n        \"\"\"Moves the snake in the current direction\"\"\"\n        head = self.body[0]\n        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])\n        self.body.insert(0, new_head)\n        self.body.pop()\n\n    def check_collision(self, width: int, height: int) -> bool:\n        \"\"\"Checks if the snake has collided with the walls or itself\"\"\"\n        head = self.body[0]\n        if head[0] < 0 or head[0] >= width or head[1] < 0 or head[1] >= height:\n            return True\n        if head in self.body[1:]:\n            return True\n        return False\n\n@dataclass\nclass Food:\n    position: Tuple[int, int]\n\n    def generate_position(self, width: int, height: int):\n        \"\"\"Generates a new random position for the food\"\"\"\n        self.position = (random.randint(0, width-1), random.randint(0, height-1))\n\n    def check_collision(self, snake: Snake) -> bool:\n        \"\"\"Checks if the food has collided with the snake\"\"\"\n        return self.position == snake.body[0]\n```\n\ngame_view.py\n```python\nimport pygame\n\nclass GameView:\n    def __init__(self, width: int, height: int):\n        \"\"\"Initializes the game window\"\"\"\n        self.width = width\n        self.height = height\n        self.screen = pygame.display.set_mode((width, height))\n        pygame.display.set_caption(\"Snake\")\n\n    def draw_snake(self, snake: Snake):\n        \"\"\"Draws the snake on the screen\"\"\"\n        for segment in snake.body:\n            pygame.draw.rect(self.screen, (0, 255, 0), (segment[0]*10, segment[1]*10, 10, 10))\n\n    def draw_food(self, food: Food):\n        \"\"\"Draws the food on the screen\"\"\"\n        pygame.draw.rect(self.screen, (255, 0, 0), (food.position[0]*10, food.position[1]*10, 10, 10))\n\n    def draw_game_over(self):\n        \"\"\"Draws the game over screen\"\"\"\n        font = pygame.font.SysFont(None, 48)\n        text = font.render(\"Game Over\", True, (255, 255, 255))\n        text_rect = text.get_rect(center=(self.width/2, self.height/2))\n        self.screen.blit(text, text_rect)\n        pygame.display.update()\n```\n\ngame_controller.py\n```python\nimport pygame\n\nclass GameController:\n    def __init__(self, snake: Snake, food: Food):\n        \"\"\"Initializes the game controller\"\"\"\n        self.snake = snake\n        self.food = food\n\n    def handle_input(self):\n        \"\"\"Handles user input\"\"\"\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_UP and self.snake.direction != (0, 1):\n                    self.snake.direction = (0, -1)\n                elif event.key == pygame.K_DOWN and self.snake.direction != (0, -1):\n                    self.snake.direction = (0, 1)\n                elif event.key == pygame.K_LEFT and self.snake.direction != (1, 0):\n                    self.snake.direction = (-1, 0)\n                elif event.key == pygame.K_RIGHT and self.snake.direction != (-1, 0):\n                    self.snake.direction = (1, 0)\n\n    def update(self):\n        \"\"\"Updates the game state\"\"\"\n        self.snake.move()\n        if self.food.check_collision(self.snake):\n            self.snake.body.append(self.food.position)\n            self.food.generate_position(self.width, self.height)\n        if self.snake.check_collision(self.width, self.height):\n            self.game_over = True\n\n    def run(self, width: int, height: int):\n        \"\"\"Runs the game loop\"\"\"\n        pygame.init()\n        self.width = width\n        self.height = height\n        self.game_over = False\n        clock = pygame.time.Clock()\n        self.food.generate_position(width, height)\n        while not self.game_over:\n            clock.tick(10)\n            self.handle_input()\n            self.update()\n            self.screen.fill((0, 0, 0))\n            self.view.draw_snake(self.snake)\n            self.view.draw_food(self.food)\n            pygame.display.update()\n        self.view.draw_game_over()\n        pygame.time.wait(3000)\n        pygame.quit()\n        sys.exit()\n```\n\nmain.py\n```python\nfrom game_model import Snake, Food\nfrom game_view import GameView\nfrom game_controller import GameController\n\ndef main():\n    snake = Snake([(5, 5), (4, 5), (3, 5)], (1, 0))\n    food = Food((0, 0))\n    view = GameView(500, 500)\n    controller = GameController(snake, food, view)\n    controller.run(50, 50)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nrequirements.txt\n```\npygame==2.0.1\n```"}, {"role": "assistant", "content": "To install dependencies:\n```\npython3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n```\n\nTo run the codebase:\n```\npython3 main.py\n```"}]
Based on the requirements, the following core classes, functions, and methods will be necessary:

Classes:
- Snake: represents the snake in the game
- Game: represents the game itself
- View: handles the display of the game

Functions:
- main(): the entry point of the game

Methods:
- Snake.move(): moves the snake in the game
- Game.update(): updates the game state
- View.draw(): draws the game on the screen

Here are the contents of each file:

**game.py**
```python
from snake import Snake
import pygame

class Game:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.snake = Snake()
        self.score = 0
        self.game_over = False

    def update(self):
        self.snake.move()
        if self.snake.is_colliding_with_wall(self.width, self.height) or self.snake.is_colliding_with_self():
            self.game_over = True
        elif self.snake.is_colliding_with_food():
            self.snake.grow()
            self.score += 1
            self.snake.generate_food(self.width, self.height)

    def get_score(self):
        return self.score

    def is_game_over(self):
        return self.game_over
```

**snake.py**
```python
import random

class Snake:
    def __init__(self):
        self.body = [(0, 0)]
        self.direction = "right"
        self.food = self.generate_food()

    def move(self):
        head = self.body[-1]
        if self.direction == "right":
            new_head = (head[0] + 1, head[1])
        elif self.direction == "left":
            new_head = (head[0] - 1, head[1])
        elif self.direction == "up":
            new_head = (head[0], head[1] - 1)
        elif self.direction == "down":
            new_head = (head[0], head[1] + 1)
        self.body.append(new_head)
        if new_head != self.food:
            self.body.pop(0)
        else:
            self.generate_food()

    def generate_food(self, width, height):
        while True:
            food = (random.randint(0, width - 1), random.randint(0, height - 1))
            if food not in self.body:
                self.food = food
                break

    def grow(self):
        self.body.append(self.body[-1])

    def is_colliding_with_wall(self, width, height):
        head = self.body[-1]
        return head[0] < 0 or head[0] >= width or head[1] < 0 or head[1] >= height

    def is_colliding_with_self(self):
        head = self.body[-1]
        return head in self.body[:-1]

    def is_colliding_with_food(self):
        head = self.body[-1]
        return head == self.food
```

**view.py**
```python
import pygame

class View:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.block_size = 10
        self.screen = pygame.display.set_mode((self.width * self.block_size, self.height * self.block_size))
        pygame.display.set_caption("Snake")

    def draw(self, snake, score):
        self.screen.fill((0, 0, 0))
        for block in snake.body:
            pygame.draw.rect(self.screen, (255, 255, 255), (block[0] * self.block_size, block[1] * self.block_size, self.block_size, self.block_size))
        pygame.draw.rect(self.screen, (255, 0, 0), (snake.food[0] * self.block_size, snake.food[1] * self.block_size, self.block_size, self.block_size))
        font = pygame.font.Font(None, 30)
        text = font.render("Score: " + str(score), True, (255, 255, 255))
        self.screen.blit(text, (10, 10))
        pygame.display.update()
```

**main.py**
```python
import pygame
from game import Game
from view import View

def main():
    pygame.init()
    width = 40
    height = 30
    game = Game(width, height)
    view = View(width, height)
    clock = pygame.time.Clock()

    while not game.is_game_over():
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and game.snake.direction != "down":
                    game.snake.direction = "up"
                elif event.key == pygame.K_DOWN and game.snake.direction != "up":
                    game.snake.direction = "down"
                elif event.key == pygame.K_LEFT and game.snake.direction != "right":
                    game.snake.direction = "left"
                elif event.key == pygame.K_RIGHT and game.snake.direction != "left":
                    game.snake.direction = "right"

        game.update()
        view.draw(game.snake, game.get_score())
        clock.tick(10)

    pygame.quit()

if __name__ == "__main__":
    main()
```

**requirements.txt**
```
pygame==2.0.1
```
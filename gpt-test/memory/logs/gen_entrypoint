[{"role": "system", "content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n"}, {"role": "user", "content": "Information about the codebase:\n\nBased on the requirements, the following core classes, functions, and methods will be necessary:\n\nClasses:\n- Snake: represents the snake in the game\n- Game: represents the game itself\n- View: handles the display of the game\n\nFunctions:\n- main(): the entry point of the game\n\nMethods:\n- Snake.move(): moves the snake in the game\n- Game.update(): updates the game state\n- View.draw(): draws the game on the screen\n\nHere are the contents of each file:\n\n**game.py**\n```python\nfrom snake import Snake\nimport pygame\n\nclass Game:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.snake = Snake()\n        self.score = 0\n        self.game_over = False\n\n    def update(self):\n        self.snake.move()\n        if self.snake.is_colliding_with_wall(self.width, self.height) or self.snake.is_colliding_with_self():\n            self.game_over = True\n        elif self.snake.is_colliding_with_food():\n            self.snake.grow()\n            self.score += 1\n            self.snake.generate_food(self.width, self.height)\n\n    def get_score(self):\n        return self.score\n\n    def is_game_over(self):\n        return self.game_over\n```\n\n**snake.py**\n```python\nimport random\n\nclass Snake:\n    def __init__(self):\n        self.body = [(0, 0)]\n        self.direction = \"right\"\n        self.food = self.generate_food()\n\n    def move(self):\n        head = self.body[-1]\n        if self.direction == \"right\":\n            new_head = (head[0] + 1, head[1])\n        elif self.direction == \"left\":\n            new_head = (head[0] - 1, head[1])\n        elif self.direction == \"up\":\n            new_head = (head[0], head[1] - 1)\n        elif self.direction == \"down\":\n            new_head = (head[0], head[1] + 1)\n        self.body.append(new_head)\n        if new_head != self.food:\n            self.body.pop(0)\n        else:\n            self.generate_food()\n\n    def generate_food(self, width, height):\n        while True:\n            food = (random.randint(0, width - 1), random.randint(0, height - 1))\n            if food not in self.body:\n                self.food = food\n                break\n\n    def grow(self):\n        self.body.append(self.body[-1])\n\n    def is_colliding_with_wall(self, width, height):\n        head = self.body[-1]\n        return head[0] < 0 or head[0] >= width or head[1] < 0 or head[1] >= height\n\n    def is_colliding_with_self(self):\n        head = self.body[-1]\n        return head in self.body[:-1]\n\n    def is_colliding_with_food(self):\n        head = self.body[-1]\n        return head == self.food\n```\n\n**view.py**\n```python\nimport pygame\n\nclass View:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.block_size = 10\n        self.screen = pygame.display.set_mode((self.width * self.block_size, self.height * self.block_size))\n        pygame.display.set_caption(\"Snake\")\n\n    def draw(self, snake, score):\n        self.screen.fill((0, 0, 0))\n        for block in snake.body:\n            pygame.draw.rect(self.screen, (255, 255, 255), (block[0] * self.block_size, block[1] * self.block_size, self.block_size, self.block_size))\n        pygame.draw.rect(self.screen, (255, 0, 0), (snake.food[0] * self.block_size, snake.food[1] * self.block_size, self.block_size, self.block_size))\n        font = pygame.font.Font(None, 30)\n        text = font.render(\"Score: \" + str(score), True, (255, 255, 255))\n        self.screen.blit(text, (10, 10))\n        pygame.display.update()\n```\n\n**main.py**\n```python\nimport pygame\nfrom game import Game\nfrom view import View\n\ndef main():\n    pygame.init()\n    width = 40\n    height = 30\n    game = Game(width, height)\n    view = View(width, height)\n    clock = pygame.time.Clock()\n\n    while not game.is_game_over():\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                quit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_UP and game.snake.direction != \"down\":\n                    game.snake.direction = \"up\"\n                elif event.key == pygame.K_DOWN and game.snake.direction != \"up\":\n                    game.snake.direction = \"down\"\n                elif event.key == pygame.K_LEFT and game.snake.direction != \"right\":\n                    game.snake.direction = \"left\"\n                elif event.key == pygame.K_RIGHT and game.snake.direction != \"left\":\n                    game.snake.direction = \"right\"\n\n        game.update()\n        view.draw(game.snake, game.get_score())\n        clock.tick(10)\n\n    pygame.quit()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n**requirements.txt**\n```\npygame==2.0.1\n```"}, {"role": "assistant", "content": "To install dependencies:\n```\npython3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n```\n\nTo run the code:\n```\npython3 main.py\n```"}]